version: '3' # Compose file format version
services:
  web:  # サービス名。webとかredisとかdbとかが入る。起動順番の依存関係はdepends_onで設定する
    tty: true  # 擬似端末を保持 make container stay launched。ないとup後即終了する
    build:
      # 書き方フォーマット　https://docs.docker.com/compose/compose-file/
      context: .  # dockerファイルが存在するディレクトリ。./dirに置くこともあるみたい
      dockerfile: Dockerfile
      # CircleCIでvolumesを使うとwebが起動しない
#    volumes:
#     - ./:/var/src/app  # ローカルの.をコンテナのvar/src/appにマウント
#    volumes:          # データを永続化する場合は以下のようにvolumesを使う。今回永続化したいデータはないので使わない
#     - type: volume
#       source: mydata
#       target: /data  # コンテナ上のパス
#       volume:
#         nocopy: true
#    command: sh -c "yarn start"  # sh -cを使って&&で繋げると複数コマンドを実行できる。
                                 # docker-compose upした時に実行される。
                                 # commandが存在するとDockerfileに記載されたCMDは無視されるので注意
                                 # docker-compose run で実行するとこのコマンドは無視される（runは単独でコンテナ実行されるのでweb以外を実行した時はそもそもwebは起動しない）
#    command: sh -c "cd react-sample && yarn start"  # sh -cを使って&&で繋げると複数コマンドを実行できる。
    ports:
     - "3000:3000"
  # docker-selenium
#  selenium:
#    image: selenium/standalone-chrome-debug:3.2.0-actinium
#    volumes:
#      - /dev/shm:/dev/shm
#    ports:
#      - "4444:4444"
#      - "5900:5900"
  testcafe:
    depends_on:
      - web  # webが立ち上がってからテスト実行する（webの起動タイミングしか見ないのでhttpリクエスト受付可能か田舎はwait.shで見る必要がある）
    build:
      context: ./testcafe
    # commandに記載するとDockerfileに記載したCMDを無視する（ENTRYPOINTは無視されない）
    # > で改行
#    command: >
#      "chromium:headless --no-sandbox"
#      /var/src/test/tests/*

# volumes:
#  mydata:  # ドライバ指定できるが通常指定しない
